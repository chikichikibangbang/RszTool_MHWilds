<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:RszTool.App.Views"
                    xmlns:common="clr-namespace:RszTool.App.Common"
                    xmlns:converters="clr-namespace:RszTool.App.Converters"
                    xmlns:viewmodels="clr-namespace:RszTool.App.ViewModels"
                    xmlns:res="clr-namespace:RszTool.App.Resources"
                    xmlns:rsztool="clr-namespace:RszTool;assembly=RszTool">

    <converters:RszInstanceFieldsConverter x:Key="RszInstanceFieldsConverter"/>
    <common:BindingProxy x:Key="ParentData" Data="{Binding}" />

    <HierarchicalDataTemplate DataType="{x:Type rsztool:RszInstance}" ItemsSource="{Binding ., Converter={StaticResource RszInstanceFieldsConverter}}">
        <TextBlock Text="{Binding Name}">
            <TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text Copy}" Command="{Binding Data.CopyInstance, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.PasteInstance, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TextBlock.ContextMenu>
        </TextBlock>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:GameObejctComponentViewModel}" ItemsSource="{Binding Items}">
        <TextBlock Text="{Binding Name}">
            <TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text Copy}" Command="{Binding Data.CopyInstance, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.PasteInstance, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Remove}" Command="{Binding Data.RemoveComponent, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TextBlock.ContextMenu>
        </TextBlock>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:RszFieldInstanceViewModel}" ItemsSource="{Binding Items}">
        <TextBlock Text="{Binding Name}">
            <TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text Copy}" Command="{Binding Data.CopyInstance, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.PasteInstance, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TextBlock.ContextMenu>
        </TextBlock>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:RszFieldArrayViewModel}" ItemsSource="{Binding Items}">
        <TextBlock Text="{Binding Name}">
            <TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text NewItem}" Command="{Binding Data.ArrayItemNew, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.ArrayItemPaste, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TextBlock.ContextMenu>
        </TextBlock>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:RszFieldArrayInstanceItemViewModel}" ItemsSource="{Binding Items}">
        <TextBlock Text="{Binding Name}">
            <TextBlock.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text Copy}" Command="{Binding Data.ArrayItemCopy, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Remove}" Command="{Binding Data.ArrayItemRemove, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Duplicate}" Command="{Binding Data.ArrayItemDuplicate, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text DuplicateMulti}" Command="{Binding Data.ArrayItemDuplicateMulti, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text PasteAfter}" Command="{Binding Data.ArrayItemPasteAfter, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.ArrayItemPasteToSelf, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </TextBlock.ContextMenu>
        </TextBlock>
    </HierarchicalDataTemplate>

    <HierarchicalDataTemplate DataType="{x:Type viewmodels:BaseTreeItemViewModel}" ItemsSource="{Binding Items}">
        <TextBlock Text="{Binding Name}"/>
    </HierarchicalDataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:RszFieldNormalViewModel}">
        <local:FieldValueEdit DataContext="{Binding}" ValueChanged="{Binding Data.Changed, Source={StaticResource ParentData}}"
                              EnumDict="{Binding Data.EnumDict, Source={StaticResource ParentData}}">
            <local:FieldValueEdit.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text Copy}" Command="{Binding Data.CopyNormalField, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.PasteNormalField, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </local:FieldValueEdit.ContextMenu>
        </local:FieldValueEdit>
    </DataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:RszFieldArrayNormalItemViewModel}">
        <local:FieldValueEdit DataContext="{Binding}" ValueChanged="{Binding Data.Changed, Source={StaticResource ParentData}}"
                              EnumDict="{Binding Data.EnumDict, Source={StaticResource ParentData}}">
            <local:FieldValueEdit.ContextMenu>
                <ContextMenu>
                    <MenuItem Header="{res:Text Copy}" Command="{Binding Data.ArrayItemCopy, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Remove}" Command="{Binding Data.ArrayItemRemove, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Duplicate}" Command="{Binding Data.ArrayItemDuplicate, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text DuplicateMulti}" Command="{Binding Data.ArrayItemDuplicateMulti, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text PasteAfter}" Command="{Binding Data.ArrayItemPasteAfter, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                    <MenuItem Header="{res:Text Paste}" Command="{Binding Data.ArrayItemPasteToSelf, Source={StaticResource ParentData}}" CommandParameter="{Binding}" />
                </ContextMenu>
            </local:FieldValueEdit.ContextMenu>
        </local:FieldValueEdit>
    </DataTemplate>

    <DataTemplate DataType="{x:Type viewmodels:ClassPropertyViewModel}">
        <local:ClassPropertyEdit DataContext="{Binding}" />
    </DataTemplate>

    <!--<Style TargetType="TreeViewItem" x:Key="TreeViewItemStyle">
        <Style.Resources>
            <Style TargetType="{x:Type Border}">
                <Setter Property="Grid.ColumnSpan" Value="2" />
            </Style>
        </Style.Resources>
    </Style>-->

    <Style x:Key="ExpandCollapseToggleStyle" TargetType="ToggleButton">
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ToggleButton">
                    <Grid
                    Width="15"
                    Height="13"
                    Background="Transparent">
                        <Path
                            x:Name="ExpandPath"
                            HorizontalAlignment="Left"
                            VerticalAlignment="Center"
                            Margin="1,1,1,1"
                            Fill="{DynamicResource PrimaryForeground}"
                            Data="M 4 0 L 8 4 L 4 8 Z"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" TargetName="ExpandPath" Value="M 0 4 L 8 4 L 4 8 Z"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TreeView" BasedOn="{StaticResource {x:Type TreeView}}">
        <Setter Property="VirtualizingStackPanel.IsVirtualizing" Value="True"/>
        <Setter Property="VirtualizingStackPanel.VirtualizationMode" Value="Standard"/>
        <Setter Property="VirtualizingPanel.ScrollUnit" Value="Item"/>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <local:MyVirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TreeViewItem">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="TreeViewItem">
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="*"/>
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <ToggleButton x:Name="Expander" Style="{StaticResource ExpandCollapseToggleStyle}"
                                      Grid.Row="0"
                                      Grid.Column="0"
                                      IsChecked="{Binding IsExpanded, RelativeSource={RelativeSource TemplatedParent}}"
                                      ClickMode="Press"/>

                        <Border x:Name="Bd"
                                Grid.Row="0"
                                Grid.Column="1"
                                Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="0,2,0,2">
                            <ContentPresenter x:Name="PART_Header" ContentSource="Header" HorizontalAlignment="Stretch" />
                        </Border>
                        <ItemsPresenter x:Name="ItemsHost" Grid.Row="1" Grid.Column="1"/>
                    </Grid>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="false">
                            <Setter TargetName="ItemsHost" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="HasItems" Value="false">
                            <Setter TargetName="Expander" Property="Visibility" Value="Hidden" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Width" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinWidth" Value="75"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="HasHeader" Value="false"/>
                                <Condition Property="Height" Value="Auto"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="PART_Header" Property="MinHeight" Value="19"/>
                        </MultiTrigger>
                        <Trigger Property="IsSelected" Value="true">
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.HighlightTextBrushKey}}"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsSelected" Value="true"/>
                                <Condition Property="IsSelectionActive" Value="false"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Bd" Property="Background" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
                        </MultiTrigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <local:MyVirtualizingStackPanel />
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="TreeViewItem" x:Key="TreeViewItemHideIfEmpty" BasedOn="{StaticResource {x:Type TreeViewItem}}">
        <!-- skip effect children -->
        <Setter Property="ItemContainerStyle" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="ItemsControl.HasItems" Value="False">
                <Setter Property="Visibility" Value="Collapsed"/>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
